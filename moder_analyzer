import re
import json
from datetime import datetime, timedelta, timezone
from collections import defaultdict, Counter
from tqdm import tqdm
from telethon import TelegramClient
from telethon.tl.types import Message

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
config = {
    "api_id": ,
    "api_hash": "",
    "phone_number": "+",
    "mod_chat_id": -,
    "main_chat_id": -,
    "bot_id": 707693258,
    "history_file": "moderation_history.json",
    "report_file": "moderation_report.txt"
}

client = TelegramClient("moderation_analyzer", config["api_id"], config["api_hash"])

patterns = {
    "mute": re.compile(
        r"(?P<target>[^\n()]+?)\s*\(@?(?P<target_username>[^\s)]+)?\)\s*"
        r"–ª–∏—à–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∞ —Å–ª–æ–≤–∞\s*–Ω–∞\s*(?P<duration>\d+\s*(?:–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç[—ã]?))\s*"
        r"(?:üí¨\s*–ü—Ä–∏—á–∏–Ω–∞:\s*(?P<reason>[^\n]+))?",
        re.IGNORECASE
    ),
    "warn": re.compile(
        r"(?P<target>[^\n()]+?)\s*\(@?(?P<target_username>[^\s)]+)?\)\s*"
        r"–ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ(?:\s*\(\d/3\))?\s*‚è±\s*"
        r"–ë—É–¥–µ—Ç —Å–Ω—è—Ç–æ —á–µ—Ä–µ–∑\s*(?P<duration>[\d\s–∞-—èa-z]+)\s*"
        r"(?:üí¨\s*–ü—Ä–∏—á–∏–Ω–∞:\s*(?P<reason>[^\n]+))?",
        re.IGNORECASE
    ),
    "ban": re.compile(
        r"(?P<target>[^\n()]+?)\s*\(@?(?P<target_username>[^\s)]+)?\)\s*"
        r"–ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω\s*(?P<duration>–Ω–∞–≤—Å–µ–≥–¥–∞|\d+[smhdw]?)\s*"
        r"(?:üí¨\s*–ü—Ä–∏—á–∏–Ω–∞:\s*(?P<reason>[^\n]+))?",
        re.IGNORECASE
    ),
    "moderator": re.compile(
        r"(?:üë∫|ü¶∏|üëÆ‚Äç)\s*–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:\s*(?P<name>[^(\n]+)\s*(?:\(@?(?P<username>[^\s)]+)\))?",
        re.IGNORECASE
    )
}

class ModerationAnalyzer:
    def __init__(self):
        self.reset_data()
        self.full_rescan = False

    def reset_data(self):
        self.mutes = []
        self.warns = []
        self.bans = []
        self.last_message_id = 0
        self.last_analysis = datetime(1970, 1, 1)
        self.target_stats = defaultdict(lambda: {
            "mutes": 0, "warns": 0, "bans": 0, "moderators": set()
        })

    def load_history(self):
        try:
            with open(config["history_file"], "r", encoding="utf-8") as f:
                data = json.load(f)
                for action_type in ["mutes", "warns", "bans"]:
                    for action in data.get(action_type, []):
                        action["timestamp"] = datetime.fromisoformat(action["timestamp"])
                
                self.mutes = data.get("mutes", [])
                self.warns = data.get("warns", [])
                self.bans = data.get("bans", [])
                self.last_message_id = data.get("last_message_id", 0)
                self.last_analysis = datetime.fromisoformat(data.get("last_analysis", "1970-01-01T00:00:00"))
                
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.mutes)} –º—É—Ç–æ–≤, {len(self.warns)} –≤–∞—Ä–Ω–æ–≤, {len(self.bans)} –±–∞–Ω–æ–≤")
                
        except (FileNotFoundError, json.JSONDecodeError, KeyError) as e:
            print(f"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑): {e}")
            self.reset_data()
            self.full_rescan = True

    def save_history(self):
        data = {
            "mutes": [{**m, "timestamp": m["timestamp"].isoformat()} for m in self.mutes],
            "warns": [{**w, "timestamp": w["timestamp"].isoformat()} for w in self.warns],
            "bans": [{**b, "timestamp": b["timestamp"].isoformat()} for b in self.bans],
            "last_message_id": self.last_message_id,
            "last_analysis": datetime.now(timezone.utc).isoformat()
        }
        
        try:
            with open(config["history_file"], "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    async def analyze_message(self, message: Message):
        if not message.text or message.id <= self.last_message_id:
            return False
        
        for action_list in [self.mutes, self.warns, self.bans]:
            if any(action.get('id') == message.id for action in action_list):
                return False
            
        text = message.text
        action = None
        action_type = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Ç
            if "–ª–∏—à–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∞ —Å–ª–æ–≤–∞" in text.lower():
                match = patterns["mute"].search(text)
                if match and match.group("target").strip() not in ["", "‚Å¨"]:
                    mod_match = patterns["moderator"].search(text)
                    moderator = mod_match.group("name").strip() if mod_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    action = {
                        "timestamp": message.date,
                        "moderator": moderator,
                        "target": match.group("target").strip(),
                        "target_username": match.group("target_username"),
                        "reason": match.group("reason") or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        "duration": match.group("duration"),
                        "id": message.id
                    }
                    self.mutes.append(action)
                    action_type = "mute"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞—Ä–Ω
            elif "–ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" in text.lower():
                match = patterns["warn"].search(text)
                if match and match.group("target").strip() not in ["", "‚Å¨"]:
                    mod_match = patterns["moderator"].search(text)
                    moderator = mod_match.group("name").strip() if mod_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    action = {
                        "timestamp": message.date,
                        "moderator": moderator,
                        "target": match.group("target").strip(),
                        "target_username": match.group("target_username"),
                        "reason": match.group("reason") or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        "duration": match.group("duration"),
                        "id": message.id
                    }
                    self.warns.append(action)
                    action_type = "warn"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
            elif "–ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω" in text.lower():
                match = patterns["ban"].search(text)
                if match and match.group("target").strip() not in ["", "‚Å¨"]:
                    mod_match = patterns["moderator"].search(text)
                    moderator = mod_match.group("name").strip() if mod_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    action = {
                        "timestamp": message.date,
                        "moderator": moderator,
                        "target": match.group("target").strip(),
                        "target_username": match.group("target_username"),
                        "reason": match.group("reason") or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        "duration": match.group("duration"),
                        "id": message.id
                    }
                    self.bans.append(action)
                    action_type = "ban"
            
            if action:
                target_key = action["target_username"] or action["target"]
                self.target_stats[target_key][action_type + "s"] += 1
                self.target_stats[target_key]["moderators"].add(action["moderator"])
                print(f"–ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type} –æ—Ç {action['moderator']} –¥–ª—è {action['target']}")
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {str(e)[:100]}...")
            
        return False

    async def analyze_all_messages(self):
        try:
            chat = await client.get_entity(config["main_chat_id"])
            bot_entity = await client.get_entity(config["bot_id"])
            
            total = await client.get_messages(chat, limit=0, from_user=bot_entity)
            print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞: {total.total}")
            
            async for message in client.iter_messages(
                chat,
                from_user=bot_entity,
                reverse=True,
                limit=None
            ):
                try:
                    await self.analyze_message(message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}: {str(e)[:100]}...")
                    continue
                    
            if self.mutes or self.warns or self.bans:
                self.last_message_id = max(
                    *(m.get('id', 0) for m in self.mutes),
                    *(w.get('id', 0) for w in self.warns),
                    *(b.get('id', 0) for b in self.bans))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise

    async def get_moderators(self):
        moderators = []
        try:
            chat = await client.get_entity(config["mod_chat_id"])
            async for member in client.iter_participants(chat):
                if not member.bot:
                    moderators.append({
                        "id": member.id,
                        "name": member.first_name,
                        "username": member.username
                    })
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(moderators)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            return moderators
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []

    def get_period_stats(self, actions, current_date):
        week_ago = current_date - timedelta(days=7)
        month_ago = current_date - timedelta(days=30)
        
        week_count = Counter()
        month_count = Counter()
        total_count = Counter()
        
        for action in actions:
            moderator = action["moderator"]
            timestamp = action["timestamp"]
            
            if timestamp.tzinfo is None:
                timestamp = timestamp.replace(tzinfo=timezone.utc)
            
            total_count[moderator] += 1
            if timestamp >= week_ago:
                week_count[moderator] += 1
            if timestamp >= month_ago:
                month_count[moderator] += 1
        
        return week_count, month_count, total_count

    async def generate_report(self):
        current_date = datetime.now(timezone.utc)
        
        moderators_list = []
        try:
            mod_chat = await client.get_entity(config["mod_chat_id"])
            async for member in client.iter_participants(mod_chat):
                if not member.bot:
                    name_variants = []
                    if member.first_name:
                        name_variants.append(member.first_name)
                    if member.last_name:
                        name_variants.append(f"{member.first_name} {member.last_name}")
                    if member.username:
                        name_variants.append(f"@{member.username}")
                    
                    for name in set(name_variants):
                        if name.strip():
                            moderators_list.append(name.lower())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

        mute_week, mute_month, mute_total = self.get_period_stats(self.mutes, current_date)
        warn_week, warn_month, warn_total = self.get_period_stats(self.warns, current_date)
        ban_week, ban_month, ban_total = self.get_period_stats(self.bans, current_date)
        
        self.mutes.sort(key=lambda x: x["timestamp"])
        self.warns.sort(key=lambda x: x["timestamp"])
        self.bans.sort(key=lambda x: x["timestamp"])
        
        try:
            with open(config["report_file"], "w", encoding="utf-8") as f:
                f.write(f"–û—Ç—á–µ—Ç –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})\n\n")
                f.write(f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(self.mutes)} –º—É—Ç–æ–≤, {len(self.warns)} –≤–∞—Ä–Ω–æ–≤, {len(self.bans)} –±–∞–Ω–æ–≤\n\n")
                
                # –ú—É—Ç—ã
                f.write("------ –ú—É—Ç—ã ------\n")
                for mute in self.mutes[-10:]:
                    ts = mute["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
                    target = f"@{mute['target_username']}" if mute['target_username'] else mute['target']
                    f.write(f"[{ts}] {mute['moderator']} ‚Üí {target} ({mute['duration']})")
                    if mute['reason'] != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                        f.write(f" | –ü—Ä–∏—á–∏–Ω–∞: {mute['reason']}")
                    f.write("\n")
                
                f.write("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—É—Ç–æ–≤:\n")
                for mod, count in mute_total.most_common():
                    f.write(f"- {mod}: {count}\n")
                
                # –í–∞—Ä–Ω—ã
                f.write("\n------ –í–∞—Ä–Ω—ã ------\n")
                for warn in self.warns[-10:]:
                    ts = warn["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
                    target = f"@{warn['target_username']}" if warn['target_username'] else warn['target']
                    f.write(f"[{ts}] {warn['moderator']} ‚Üí {target} ({warn['duration']})")
                    if warn['reason'] != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                        f.write(f" | –ü—Ä–∏—á–∏–Ω–∞: {warn['reason']}")
                    f.write("\n")
                
                f.write("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Ä–Ω–æ–≤:\n")
                for mod, count in warn_total.most_common():
                    f.write(f"- {mod}: {count}\n")
                
                # –ë–∞–Ω—ã
                f.write("\n------ –ë–∞–Ω—ã ------\n")
                for ban in self.bans[-10:]:
                    ts = ban["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
                    target = f"@{ban['target_username']}" if ban['target_username'] else ban['target']
                    f.write(f"[{ts}] {ban['moderator']} ‚Üí {target} ({ban['duration']})")
                    if ban['reason'] != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                        f.write(f" | –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}")
                    f.write("\n")
                
                f.write("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–æ–≤:\n")
                for mod, count in ban_total.most_common():
                    f.write(f"- {mod}: {count}\n")
                
                # –¢–æ–ø-5 –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
                f.write("\n------ –¢–æ–ø-5 –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π ------\n")

                violators = defaultdict(lambda: {'mutes': 0, 'warns': 0, 'bans': 0})
                for mute in self.mutes:
                    violators[mute['target']]['mutes'] += 1
                for warn in self.warns:
                    violators[warn['target']]['warns'] += 1
                for ban in self.bans:
                    violators[ban['target']]['bans'] += 1

                # –ò—Å–∫–ª—é—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                moderators_lower = [m.lower() for m in moderators_list]
                top_violators = [
                    (user, stats) for user, stats in violators.items()
                    if user.lower() not in moderators_lower and 
                    not any(m.lower() in user.lower() for m in moderators_lower)
                ]

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø-5
                sorted_violators = sorted(
                    top_violators,
                    key=lambda x: (x[1]['mutes'] + x[1]['warns'] + x[1]['bans']),
                    reverse=True
                )

                for i, (user, stats) in enumerate(sorted_violators[:5], 1):
                    total = stats['mutes'] + stats['warns'] + stats['bans']
                    display_name = f"@{user}" if not user.startswith('@') and not any(c in user for c in [' ', '|']) else user
                    f.write(f"{i}. {display_name}:\n")
                    f.write(f"   –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {total}\n")
                    f.write(f"   ‚Ä¢ –ú—É—Ç—ã: {stats['mutes']}\n")
                    f.write(f"   ‚Ä¢ –í–∞—Ä–Ω—ã: {stats['warns']}\n")
                    f.write(f"   ‚Ä¢ –ë–∞–Ω—ã: {stats['bans']}\n\n")

                if not sorted_violators:
                    f.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö\n\n")
                
                # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                f.write("\n------ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ ------\n")
                
                mod_activity = defaultdict(lambda: {'mutes': 0, 'warns': 0, 'bans': 0})
                
                for mute in self.mutes:
                    mod_activity[mute['moderator']]['mutes'] += 1
                for warn in self.warns:
                    mod_activity[warn['moderator']]['warns'] += 1
                for ban in self.bans:
                    mod_activity[ban['moderator']]['bans'] += 1

                sorted_mods = sorted(
                    mod_activity.items(),
                    key=lambda x: (x[1]['mutes'] + x[1]['warns'] + x[1]['bans']),
                    reverse=True
                )

                for i, (mod, stats) in enumerate(sorted_mods[:5], 1):
                    total = stats['mutes'] + stats['warns'] + stats['bans']
                    f.write(f"{i}. {mod}:\n")
                    f.write(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total}\n")
                    f.write(f"   ‚Ä¢ –ú—É—Ç–æ–≤: {stats['mutes']}\n")
                    f.write(f"   ‚Ä¢ –í–∞—Ä–Ω–æ–≤: {stats['warns']}\n")
                    f.write(f"   ‚Ä¢ –ë–∞–Ω–æ–≤: {stats['bans']}\n\n")
                
            print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config['report_file']}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    analyzer = ModerationAnalyzer()
    analyzer.load_history()
    
    await client.start(config["phone_number"])
    if not await client.is_user_authorized():
        await client.send_code_request(config["phone_number"])
        code = input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ')
        await client.sign_in(config["phone_number"], code)
    
    try:
        if analyzer.full_rescan:
            print("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            await analyzer.analyze_all_messages()
        else:
            print("–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            chat = await client.get_entity(config["main_chat_id"])
            bot_entity = await client.get_entity(config["bot_id"])
            
            total = await client.get_messages(chat, limit=0, from_user=bot_entity)
            print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞: {total.total}")
            
            async for message in client.iter_messages(
                chat,
                from_user=bot_entity,
                min_id=analyzer.last_message_id + 1,
                reverse=True,
                limit=None
            ):
                try:
                    await analyzer.analyze_message(message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}: {str(e)[:100]}...")
                    continue
        
        analyzer.save_history()
        await analyzer.generate_report()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())
